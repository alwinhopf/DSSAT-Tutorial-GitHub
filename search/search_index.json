{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the DSSAT tutorial","text":"<p>The intention of this tutorial is to provide a step-by-step guide for users with limited previous experience. The DSSAT software package contains a number of different groups of crop models. This tutorial is focused on the CROPGRO model within DSSAT, specifically setting up a simulation, adding, adapting or calibrating a new crop or experiment as well as some key functions and parameters of CROPGRO. Most descriptions will also apply to other models within DSSAT, but specifically the calibration and adaptation of new crops or datasets will be somewhat unique to CROPGRO. Other models might have different functions and capabilities that will require a different approach. </p> <p>General information about DSSAT can be found on the DSSAT Website</p>"},{"location":"#learning-resources-for-dssat","title":"Learning resources for DSSAT","text":"<p>Where and How to Learn DSSAT</p>"},{"location":"#dssat-installation","title":"DSSAT installation","text":"<p>General users with a windows system can install the regular version of DSSAT with a graphical user interface: Installation of DSSAT GUI</p> <p>If you want to run DSSAT on a non-Windows system, via the command line, or read and edit the source code, you need to install the \"Developer Version\": Installation of DSSAT Developer Version</p>"},{"location":"#running-a-reference-simulation-in-dssat","title":"Running a reference simulation in DSSAT","text":"<p>Overview about a DSSAT Simulation</p> <p>Visualizing and Analyzing Simulation Outputs</p> <p>Editing a reference simulation in DSSAT</p>"},{"location":"#setting-up-custom-simulation","title":"Setting up custom simulation","text":""},{"location":"#importing-your-own-data","title":"Importing your own data","text":"<p>Import Soil Data</p> <p>Import Weather Data</p> <p>Import Observations (fileA and fileT)</p>"},{"location":"#adding-a-new-crop-type","title":"Adding a new crop type","text":"<p>Adding new crop in DSSAT GUI</p> <p>Parameterizing and calibrating a new crop</p>"},{"location":"#miscellaneous-tools-and-guides-for-dssat","title":"Miscellaneous Tools and Guides for DSSAT","text":"<p>Visualizing outputs in R-Studio</p> <p>Spatial simulations</p> <p>CROPGRO model structure</p>"},{"location":"DSSAT%20Learning%20Resources/Where%20and%20How%20to%20Learn%20DSSAT/","title":"Where and How to Learn DSSAT","text":""},{"location":"DSSAT%20Learning%20Resources/Where%20and%20How%20to%20Learn%20DSSAT/#where-to-learn-dssat","title":"Where to learn DSSAT?","text":"<ul> <li>Annual DSSAT Workshop</li> <li>Class at the University of Florida: ABE 6645C Computer Simulation of Crop Growth and Management Responses (taught in summer semester, includes the DSSAT Workshop)</li> <li>Official DSSAT YouTube channel</li> </ul> <p>Other YouTube channels provide tutorials for various steps too, some examples linked:</p> <ul> <li>Creation of Crop Management File</li> <li>Video Series by Matthew Harrison Note that this also includes some video tutorials on another crop modeling software APSIM which do not apply to DSSAT. </li> <li>Video Series by Francisco Villalobos</li> </ul>"},{"location":"DSSAT%20Learning%20Resources/Where%20and%20How%20to%20Learn%20DSSAT/#written-documentation","title":"Written Documentation","text":"<p>Key Publications that describe the current DSSAT structure and overall functioning. </p> <ul> <li>Hoogenboom, G., C.H. Porter, K.J. Boote, V. Shelia, P.W. Wilkens, U. Singh, J.W. White, S. Asseng, J.I. Lizaso, L.P. Moreno, W. Pavan, R. Ogoshi, L.A. Hunt, G.Y. Tsuji, and J.W. Jones. 2019. The DSSAT crop modeling ecosystem. In: p.173-216 [K.J. Boote, editor] Advances in Crop Modeling for a Sustainable Agriculture. Burleigh Dodds Science Publishing, Cambridge, United Kingdom (https://dx.doi.org/10.19103/AS.2019.0061.10).</li> <li>Jones, J.W., G. Hoogenboom, C.H. Porter, K.J. Boote, W.D. Batchelor, L.A. Hunt, P.W. Wilkens, U. Singh, A.J. Gijsman, and J.T. Ritchie. 2003. The DSSAT cropping system model. European Journal of Agronomy 18:235-265 (https://doi.org/10.1016/S1161-0301(02)00107-7).</li> <li>Additional Key Books, Book Chapters and Journal Articles</li> </ul> <p>Further documentation is contained within the DSSAT Software via \u201cHelp\u201d \u2013&gt; \u201cFind Help on\u201d, as well as within the source code comments (when using developer version). </p>"},{"location":"DSSAT%20Setup/Installation%20of%20DSSAT%20GUI/","title":"Installation of DSSAT GUI","text":"<p>Request a license via the DSSAT website: https://get.dssat.net/ </p> <p>You will then receive a download link, install like other software on Windows via the \u201c\u201cInstall DSSAT vX.X.X.exe\u201d\u201d</p> <p></p> <p>If upgrading from previous installations of DSSAT, it is recommended to remove previous installations via \u201c\u201cAdd or remove programs\u201d\u201d in Windows. Also delete the DSSAT folder before installation of the new version. Make sure to backup your own files. </p> <p></p>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/","title":"Editing a reference simulation in DSSAT","text":"<p>Start with UFGA8201 as example (corn grown in Gainesville). Copy the files, adjust the file to refer to your year (2022?), weather file, soil file, observation file. Find current files in \u201cDSSAT Files\u201d folder, upload your new/edited files there too so I can review</p> <ul> <li>Adjust name: UFGA = University of Florida, Gainesville \u00e0 e.g. UFLO for Live Oak</li> <li>Adjust year: 82xx means 1982 \u00e0 change to e.g. 22xx</li> <li>xx01 means experiment 1 for that location and year  <ul> <li>if you have multiple experiments/sites at that location/year you can use xx02, xx03 and so on\u00a0</li> <li>the corresponding weather and observation files need to match that format</li> <li>UFLO2201: UFHA2201 also in file name of weather and observation</li> </ul> </li> </ul>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/#changing-crop-type","title":"Changing Crop Type","text":"<p>The crop of the simulation can be changed in the General Information of the X file </p> <p>Some crops have multiple \u201ccrop modules\u201d available, which differ in their structure and approach to modeling. To simulate the same crop and same weather, soil and management data, but with a different group of model, you can change the \u201cCrop Module\u201d in the General Tab  </p>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/#add-planting-and-harvest-dates","title":"Add Planting and Harvest Dates","text":"<p>Edit Simulation settings \u00e0 Management \u00e0 Planting. Select tab \u201cSowing\u201d, unless you worked with transplants. Add planting and emergence date (if known), define planting density, depth and row spacing. Add 2nd level if you have a sub-field or so with a different planting date in the same or different year</p> <p></p>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/#add-irrigation","title":"Add Irrigation","text":"<p>Note: This is only for additional irrigation. Rainfall comes from weather file</p> <p>Edit simulation settings \u00e0 Management \u00e0 Irrigation</p> <p>Define date and amount of each irrigation application, as well as type</p> <p>Add more dates via \u201cAdd Application\u201d</p> <p></p>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/#add-fertilization","title":"Add Fertilization","text":"<p>Edit simulation settings \u00e0 Management \u00e0 Fertilizers. Define date, source materials, application type, depth and quantity of NPK etc.</p> <p>Add additional applications via \u201cAdd Application\u201d. If experiments are fertilized in different way, add new level</p> <p></p> <p>You can double-check the dates in the text file again</p> <p></p>"},{"location":"Running%20Reference%20Simulation/Editing%20a%20reference%20simulation%20in%20DSSAT/#add-environmental-modifications","title":"Add Environmental Modifications","text":"<p>Environmental modifications are useful to temporarily change specific environmental parameters without editing the original weather files. For example, a percentual reduction in light or fixed reduction on temperature in the whole season or only specific days. Using simulation settings, one can then run the simulation with/without the modification to study the impact, without changes to the original files.</p> <p>Select simulation \u2192 Edit \u2192 XBuild \u2192 Environment \u2192 Environmental Modifications</p> <p></p> <p>Exemplary change of weather of 4 specific days: set daylength to 12 hours, decrease maximum temperature by 2, increase minimum temperature by 1.</p> <p></p> <p>The modification can then be selected under Treatments in \u201cEnv. Mod.\u201d, running the simulation should show a slight difference in growth with/without the environmental modification. For larger changes (e.g., whole season with lower temperature), it might be more effective to create new weather files and have a treatment with a different \u201cField\u201d linked to a different weather station.</p> <p></p>"},{"location":"Running%20Reference%20Simulation/Overview%20about%20a%20DSSAT%20Simulation/","title":"Overview about a DSSAT Simulation","text":"<p>Steps in this tutorial are shown using UFGA8202 as an example, as this comes with all standard DSSAT installations. </p>"},{"location":"Running%20Reference%20Simulation/Overview%20about%20a%20DSSAT%20Simulation/#file-types-and-naming","title":"File Types and Naming","text":"<p>.X: contains the settings and parameters for the simulation, e.g.: what crops, fertilization, date and location</p> <p>.T: contain your observations from field experiment</p> <p>.SOIL: contain your soil profile information</p> <p>.WTH: contain your weather information</p>"},{"location":"Running%20Reference%20Simulation/Visualizing%20and%20Analyzing%20Simulation%20Outputs/","title":"Visualizing and Analyzing Simulation Outputs","text":"<p>Mark specific simulations under \u201cTreatments\u201d \u2192 click \u201cRun\u201d in GUI. \u201cSimulations are Completed!\u201d message should appear. </p> <p></p> <p>Select output files of interest, plot or view text file. - PlantGro = height, width, biomass growth - SoilNi and SoilNiBal = soil nitrogen balance</p> <p></p> <p>For example: checking nitrogen number of applications and amounts. This should match what you have specified in experimental settings. Colors indicate different variables and treatments. Note that units are sometimes scaled, indicated by x 10 after variable name.</p> <p></p> <p>N uptake and leaching. As expected, higher N experiment has more uptake (since more N available), but uptake reaches plateau which could indicate excess nitrogen. Nitrogen leaching graph confirms higher leaching in higher nitrogen treatment.</p> <p></p> <p></p>"},{"location":"Setup%20Custom%20Simulation/Adding%20new%20crop%20in%20DSSAT%20GUI/","title":"Adding new crop in DSSAT GUI","text":"<p>DSSAT \u2192 Crops \u2192 \u2018\u2018Add New Crop\u2019\u2019</p> <p></p> <p>Example for Hemp - enter exactly as shown</p> <p>Crop Name: Hemp</p> <p>Crop Code: HM (for other crops: check in crop_codes.csv in DSSAT main directory)</p> <p>Module Name: CRGRO</p> <p>Description: CRGRO-Hemp (will auto populate)</p> <p>DSSAT Tree Node: Fiber (group of crops it belongs to)</p> <p>\u2192 click save \u2192 should appear in DSSAT GUI. Note that you still need to copy the respective files of the new crop into the new \u201cCrop Name\u201d directory, including new genetic, weather and soil files as needed. </p> <p></p> <p> </p> <p>Use \u201cRefresh\u201d option if new crop does not appear in list of available crops in XBUILD (e.g. Hemp) </p> <p>Files that might need addition of crop code (HM for Hemp, SR for Strawberry etc.) if not already present in DSSAT - Simulation.CDE - Detail.CDE - DSSATPRO.v48</p> <p>To make changes to the naming and file structure of existing crops: Switch to \u201cModels\u201d Tab --&gt; Select Model, for example \u201cStrawberry\u201d </p> <p></p>"},{"location":"Setup%20Custom%20Simulation/Parameterizing%20and%20calibrating%20a%20new%20crop/","title":"Parameterizing and calibrating a new crop","text":""},{"location":"Setup%20Custom%20Simulation/Parameterizing%20and%20calibrating%20a%20new%20crop/#species-file","title":"Species File","text":"<p>Plant Tissue Composition</p> <p>Partitioning between leaf, stem, fruit</p> <p>Canopy Height and Width</p> <p>VSTAGE: Number of nodes on main stem of plant = number of branches (or branch pairs)</p> <p>VSTAGE grow until xx</p> <p>Canopy height and width set in .SPE file, depending on VSTAGE</p> <p>.ECO and .CUL files</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/","title":"Visualizing outputs in R Studio","text":"<p>DSSAT output files are in proprietary format and text files. They can be manually imported in .csv or .xlsx but using the spaces between rows to separate values. DSSAT also offers a .csv output option in the simulation setting: FMOPT = \u201cA\u201d \u2192 ASCII text files, = \u201cC\u201d \u2192 .csv files. Not supported for all output files yet, but the most common one. </p> <p>DSSAT R package could be one way of importing data and plotting graphs: https://cran.r-project.org/web/packages/DSSAT/index.html</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#example-r-code","title":"Example R Code","text":""},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#setup","title":"Setup","text":"<p>library(DSSAT)</p> <p>options(DSSAT.CSM=\"C:/DSSAT48/DSCSM048.exe\")</p> <p>library(dplyr)</p> <p>library(ggpubr)</p> <p>library(ggplot2)</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#1-simple-run-run-simulation-for-all-treatments-of-one-specific-experiment","title":"1. Simple Run - Run simulation for all treatments of one specific experiment","text":"<p>Soybean Experiment UFGA8401 (from 1984), part of standard DSSAT installation</p> <p>run_dssat(run_mode = \"A\", file_name = 'UFGA8401.SBX', suppress_output = FALSE)</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#2-simple-run-with-specifying-one-specific-treatment-of-one-experiment","title":"2. Simple Run with specifying one specific treatment of one experiment","text":"<p>Recommended because plotting multiple treatments at same time required additional steps</p> <p>filename &lt;- \"UFGA8401.SBX\"</p> <p>batch_file_path &lt;- paste0(getwd(),'/DSSBatch.V48')</p> <p>write_dssbatch(x=(filename), trtno=1:1, file_name = batch_file_path)</p> <p>run_dssat()</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#21-simple-graph-with-simulated-values","title":"2.1. Simple graph with simulated values","text":"<p>plantgro &lt;- read_output('PlantGro.OUT')</p> <p>LAI &lt;- ggplot(data=plantgro,aes(x=DAP,y=LAID)) +</p> <p>geom_line() +</p> <p>ylab(expression(Leaf<sub>Area</sub>Index~\"(\"m<sup>2~m</sup>{-2}\")\")) +</p> <p>xlab(\"Days After Planting\") +</p> <p>theme_bw() +</p> <p>theme(legend.position='bottom')</p> <p>LAI</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#3-batch-run-run-simulations-for-specific-treatments-of-a-specific-experiment","title":"3. Batch Run - Run simulations for specific treatments of a specific experiment","text":"<p>setwd(\"C:/DSSAT48/Soybean\")</p> <p>filename &lt;- \"UFGA8401\"</p> <p>batch_file_path &lt;- paste0(getwd(),'/DSSBatch.V48')</p> <p>write_dssbatch(x=paste0(filename,'.SBX'), trtno=1:2, file_name = batch_file_path)</p> <p>run_dssat()</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#31-merge-output-files-and-label-treatments-for-plotting","title":"3.1. Merge output files and label treatments, for plotting","text":"<p>adjust the labels for treatments as needed</p> <p>plantgro &lt;- read_output('PlantGro.OUT') %&gt;%</p> <p>mutate('Treatment'=factor(TRNO,labels=c('Irrigated','Rainfed')))</p> <p>Optional: Merge additional output files if combining different output files in same set of graphs</p> <p>plantn &lt;- read_output('PlantN.OUT') %&gt;%</p> <p>mutate('Treatment'=factor(TRNO,labels=c('Irrigated','Rainfed')))</p> <p>etphot &lt;- read_output('ETPhot.OUT') %&gt;%</p> <p>mutate('Treatment'=factor(TRNO,labels=c('Irrigated','Rainfed')))</p> <p>treatment_variable &lt;- plantgro$Treatment</p> <p>Example below if you want to have unit in treatment header</p> <p>treatment_variable &lt;- plantgro$'Planting Density (plants m-2)'</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#32-plot-lai-different-line-type-for-each-of-the-treatments","title":"3.2. Plot LAI -Different line type for each of the treatments","text":"<p>LAI &lt;- ggplot(data=plantgro,aes(x=DAP,y=LAID,linetype=treatment_variable)) +</p> <p>geom_line() +</p> <p>ylab(expression(Leaf<sub>Area</sub>Index~\"(\"m<sup>2~m</sup>{-2}\")\")) +</p> <p>xlab(\"Days After Planting\") +</p> <p>theme_bw() +</p> <p>theme(axis.title.x=element_blank(),</p> <p>axis.text.x=element_blank(),</p> <p>legend.position=\"none\")</p> <p>LAI</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#33-plot-leaf-weight","title":"3.3. Plot Leaf Weight","text":"<p>leaf_weight &lt;- ggplot(data=plantgro,aes(x=DAP,y=LWAD,linetype=treatment_variable)) +</p> <p>geom_line() +</p> <p>ylab(expression(Leaf<sub>Weight</sub>\"(\"kg<sub>dm</sub>ha^{-1}\")\")) +</p> <p>xlab(\"Days After Planting\") +</p> <p>theme_bw() +</p> <p>theme(legend.position='bottom')</p> <p>leaf_weight</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#34-plot-canopy-height","title":"3.4. Plot Canopy Height","text":"<p>height &lt;- ggplot(data=plantgro,aes(x=DAP,y=CHTD,linetype=treatment_variable)) +</p> <p>geom_line() +</p> <p>ylab(expression(Canopy<sub>Height</sub>\"(m)\")) +</p> <p>xlab(\"Days After Planting\") +</p> <p>theme_bw() +</p> <p>theme(axis.title.x=element_blank(),</p> <p>axis.text.x=element_blank(),</p> <p>legend.position=\"none\")</p> <p>height</p>"},{"location":"Setup%20Custom%20Simulation/Visualizing%20outputs%20in%20R-Studio/#35-combine-multiple-graphs-into-one","title":"3.5. Combine multiple graphs into one","text":"<p>Note that legend was specified accordingly to layout (top grpah does not have a legend etc)</p> <p>simulation &lt;- ggarrange(height, LAI, leaf_weight,</p> <p>labels = \"auto\", label.x=0.875, font.label =\u00a0 list(size = 20, face = \"bold\", color =\"black\"),</p> <p>ncol = 1, nrow = 3)</p> <p>simulation</p>"},{"location":"Setup%20Custom%20Simulation/CROPGRO%20Model/CROPGRO%20model%20structure/","title":"CROPGRO model structure","text":"<p>Phenology</p> <p>Time requirement to progress from one growth stage to next: \u201cPhotothermal time\u201d, 1 calendar day = 1 photothermal day under optimal conditions, less under non-optimal conditions</p> <p>Planting to Emergence, to First True Leaf, to end juvenile Phase, to Floral Induction, to Flowering, to First Pod, to First Seed, to Physiological Maturity Proportion of time between first seed formed and physiological maturity that last seed can be formed First flower to last leaf on stem (Rate of leaf appearance also determined by thermal time)   Each growth stage can have different requirement, can also be 0 if specific stage is not existent in physiology of plant</p> <p>Additional effects on phenology:</p> <p>-\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Water and Nitrogen stress slow down reproductive growth but accelerate progress towards maturity \u00e0 shorter yield formation phase, less yield. In General: faster development \u00e0 shorter life cycle \u00e0 but not necessarily more yield</p> <p>-\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Photoperiod effect, slow down when critical daylength not met</p> <p>Biomass Partitioning</p> <p>Photosynthesis</p> <p>Soil-Water-Balance</p> <p>Senecense:</p> <p>SENRTE to drive general leaf senescence, based on protein mined form leaves multiplied by factor to determine leaf weight senesced</p> <p>SENRT2 to drive leaf senescence end of season (after flowering?), based on protein lost multiplied by factor to determine leaf weight senesced</p> <p>! SENRT2\u00a0\u00a0\u00a0 Factor by which leaf weight is multiplied to determine senescence each day after NR7 (g(leaf) g(protein loss))</p> <p>! SENRTE\u00a0\u00a0\u00a0 Factor by which protein mined from leaves each day is multiplied to determine LEAF senescence. (g(leaf) / g(protein loss)) </p>"},{"location":"Setup%20Custom%20Simulation/CROPGRO%20Model/CROPGRO-Strawberry%20Model/","title":"CROPGRO Strawberry Model","text":"<p>FreshWt.OUT (everything related to fruit growth)</p> <p>Strawberry is harvested repeatedly, hence some new variables that might not exist in other DSSAT models. Model internally uses dry weight. Fresh weight is calculated through %dry weight coefficient</p> <p>F at end indicates fresh weight, D at end indicates dry weight. C at beginning is cumulative</p> <p>HRVD = dry weight of harvested fruit, individual harvest (kg[DM]/ha)</p> <p>HRVF = harvest fresh weight of mature fruit, individual harvest (kg[FM]/ha)</p> <p>CHRVD = Cumulative dry weight of harvested fruit (kg[DM]/ha)</p> <p>CHRVF = Cumulative fresh weight of harvested fruit (kg[FM]/ha)</p> <p>Yield Interpretation and Conversion</p> <p>kg/ha \u2192 g/ha \u2192  g/m2 \u2192  g/plant: (1000/10000/4.3) - g/plant as one common metric (used in publications, variety comparison) - planting density of 4.3 plants/m2 \u2192 division by 4.3 to get form m2 to individual plant - Dry to fresh weight ratio is 1g fresh = 0.16g dry. Empirically determined - E.g. CHRVD = 5030.59 kg[dm]/ha at end of season \u2192 726.74 g[FW]/plant (=5030.59 1000/10000/4.3/0.16)</p> <p>A typical yield per season can be 500-1000g/plant based on fresh weight and marketable fruit (not including non-marketable, i.e., deformed or otherwise \u201cbad\u201d fruit, which is often not harvested or not weighed)</p>"},{"location":"Setup%20Custom%20Simulation/Data%20Import%20and%20Management/Import%20Observations%20%28fileA%20and%20fileT%29/","title":"Import Observations (fileA and fileT)","text":"<p>This is a recommended step before, but you might find a more suitable way for yourself: Organize all relevant observation data in a .csv sheet. One row with DSSAT variable names, another row with your variable names for easier interpretation</p> <p></p> <p>Open DSSAT \u2192 Experimental Data under \u201cTools\u201d on left side. ATCreate window will open.</p> <p>Click on \u201cEdit File Header\u201d. Specify experiment name, crop and description. Select if File A or File T, press OK. </p> <p>If needed, Switch between A/T file by clicking on the letter in top row. A file is for once-per-season type of observation (phenology dates, final yield etc.), T file for within-season observations (continuous soil N observation e.g.).</p> <p> Use Magic Wizard tool, specify number of rows and columns needed</p> <p></p> <p></p> <p>Specify column headers with right click (variable name). Select variable name and unit. Only select available variables. If the needed variable is not in the list, check in other file (A vs. T file). Make sure you use the correct unit (DAP vs. YYDOY, kg vs. tons).</p> <p>Enter your observations into the table. Each in-season observation comes with a date (DATE) and treatment number (1 unless you have multiple treatments, then allocate treatment number appropriately). You will have a separate row for measurements from each date. If only some variables from all columns were measured, leave empty or enter -99.</p> <p></p> <p>Once finished: Delete unneeded rows (e.g. 2nd row with variable names if present) and columns. Do not leave any rows with -99 headers as this can cause errors. Double-check for empty cells (should be \u201c-99\u201d) etc. \u2192 write into .T file via save or save-as function. Exit (confirm if saved).</p> <p>Back to DSSAT, Refresh experiment list and check data observation data shows up in \u201cData\u201d tab. You can plot and view your observations here separately, double-check for missing or erroneous entries (e.g. wrong date, outliers due to wrong conversion or missing comma etc.)</p> <p></p> <p></p> <p></p> <p></p> <p>You can also review and plot the observations. These observations will now be available in your simulation, to compare simulated and observed values.</p> <p>Tip for easier processing: create a custom .csv file with only the headers you need, name the headers in the DSSAT acronym and import this file. You can use the \u201cuse current cell content as column header\u201d function in AT create to quickly assign the columns then.  See example attached, note you need to remove the additional rows 1 and 2 when importing in AT create, they contain explanation of the variable names.  </p> <p></p> <p></p> <p>Potential Errors</p> <p></p> <p></p>"},{"location":"Setup%20Custom%20Simulation/Data%20Import%20and%20Management/Import%20Soil%20Data/","title":"Import Soil Data","text":"<p>Two approaches:  a) detailed soil profile (measures for %sand, clay, loam, different depths etc.) or  b) use a pre-defined soil type from the soil database that most closely fits your assumed soil type. </p> <p>If the objective of your modeling is strongly soil type dependent (e.g. nitrogen leaching, water-limited production, drought or flooding) is strongly soil type dependent, it is strongly recommended to have detailed soil profile information available. </p> <p>DSSAT: Soil Data \u2192 Profile \u2192 New Enter country, location, code \u2192 Next</p> <p></p> <p></p> <p>Click \u201cAdd Layer\u201d for each layer you have, specify depth, % etc. \u201cMore Inputs\u201d for further parameters. Leave empty is parameter is not measured/known \u2192 \u201cNext\u201d, insert further values if known or \u201cCalculate missing values\u201d \u2192 Finish</p> <p> </p> <p>Profile \u2192 Save as \u2192  Specify name (e.g. UFLO220001) \u2192 OK  \u2192 Profile \u2192 Close \u2192 File \u2192 Save File \u2192 Exit</p> <p></p> <p>Back in DSSAT Menu \u2192 Update LST Files</p> <p></p> <p>Edit Simulation File \u2192 Environment \u2192 Fields. Soil Type should appear at top of list (right side), select and save. Test if you can run the experiment</p> <p></p> <p>When editing the text based files (instead of using XBUILD / Crop Management Data), you will see the entry under *Fields \u00e0 ID_SOIL</p> <p></p>"},{"location":"Setup%20Custom%20Simulation/Data%20Import%20and%20Management/Import%20Weather%20Data/","title":"Import Weather Data","text":"<p>_Note: This process takes almost the same effort for single vs. multiple years. If you plan on doing multi-year analysis, e.g., seasonal analysis with 30+ years, it would be useful to import all weather data at once. Some python/R solution exist that can automate the creation and import of large quantities of weather data in DSSAT.</p> <p>Note: Irrigation, temperature/humidity control or other kind of climatic parameters that are part of the \u201ctreatment\u201d are implemented via Simulation Settings. Weather Data should only includes the \u201cnatural\u201d weather data as measured, so that it can later be differentiated by e.g. simulating with/without irrigation.</p> <p>Download weather data from your source, e.g. FAWN. Make sure to include these columns: Tmin, Tmax, Rainfall, Solar Radiation, Windspeed. If the measurement interval is multiple times per day, you could downscale to 1 average measurement per day, although keeping the finer resolution is generally recommended. Save as .csv file with units in header for later identification, e.g. like this </p> <p>Open DSSAT \u2192 Weather Data (left side of menu)</p> <p>New Station</p> <p>Select \u201cInput or import raw weather data and then save as new station\u201d</p> <p>New widows \u201cData Import\u201d will open, select \u201cOpen File\u201d (top left corner)</p> <p>Select weather data file from your computer, click \u201cOpen\u201d, values will appear in \u201cData Import window </p> <p>Right click on the column and specify variable type and unit in which the data comes, e.g. DATE and mm/dd/yyyy, click OK. DSSAT will convert data unit as needed. Repeat this for all relevant columns, note how columns for which variable type and unit was specified will have the symbol in the header changes. Delete header column with the variable name at the end  </p> <p>Click on right symbol \u201cImport Data into WM\u201d when done. Select \u201cCreate new station..\u201d. Specify 4-digit station name, e.g. UFHA for University of Florida Hastings, click \u201cOK\u201d  </p> <p>Click Save. Specify location and altitude, click OK (bottom right) once filled.</p> <p> </p> <p>Loading might take few seconds or longer, depending on volume and length of weather data. Weather station overview will appear, double-check. Change 4-digit short code into a more descriptive name, e.g. \u201cHastings, Florida, USA\u201d. Click \u201cUpdate\u201d at bottom.  Click on save button (diskette) to export files via \u201cWrite Files\u201d. This weather station and data is now available for simulations in DSSAT. Close WeatherMan window.</p> <p></p> <p>Check via explorer or file manager that your new files (identified by short code, UFHA) are there in your DSSAT/Weather folder</p> <p>Update weather list in main DSSAT window via \u201cFile\u201d \u2192 \u201cUpdate all List Files\u201d </p> <p>Select Experiment, Edit experiment, click \u201cFile\u201d \u2192 \u201cRefresh\u201d</p> <p>New weather station Hastings, Florida, USA (UFHA) should appear in Weather Station list under \u201cFields\u201d Edit remaining experimental settings as needed, save and run experiment with new weather file. </p>"},{"location":"Setup%20Custom%20Simulation/Data%20Import%20and%20Management/Import%20Weather%20Data/#potential-issue-missing-entries-in-source-data","title":"Potential Issue: Missing entries in source data","text":"<p>Simple solution can be to fill with calculated mean and variance through WeatherMan </p> <p>Check that missing values are replaced in \u201ccorrected tab\u201d. Should still be missing in \u201cObserved Data\u201d tab</p> <p>Save new weather files, select \u201cCorrected Data\u201d tab, \u201cWrite Files\u201d</p> <p></p>"},{"location":"mkdocs%20obsidian%20Features/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"mkdocs%20obsidian%20Features/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"mkdocs%20obsidian%20Features/Text%20Formatting/","title":"Text Formatting","text":"<p>You can have lists like this</p> <ul> <li>first</li> <li>second</li> <li>third</li> </ul> <p>Or checklist lists to</p> <ul> <li> Get</li> <li> things</li> <li> done</li> </ul> <p>Also, get highlights and strikethroughs as above (similar to Obsidian).</p> <p>More formatting options for your webpage here. (but not compatible with Obsidian)</p>"}]}